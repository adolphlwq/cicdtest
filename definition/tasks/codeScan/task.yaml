apiVersion: devops.alauda.io/v1alpha1
kind: PipelineTaskTemplate
metadata:
  name: alaudaCodeScan
  annotations:
    alauda.io/displayName.zh-CN: 代码扫描
    alauda.io/displayName.en: CodeScan
    alauda.io/description.zh-CN: 代码扫描
    alauda.io/description.en: CodeScan
    alauda.io/readme.zh-CN: 代码扫描
    alauda.io/readme.en: CodeScan
    alauda.io/version: v0.4.20
    alauda.io/style.icon: 
  labels:
    catgory: CI
spec:
  engine: gotpl
  agent:
    label: sonarqube
  body: |+
    script{
      // unstash cloneCode
      unstash "cloneCode"

      // get sonar token and url
      def sonar_info = alauda.retrieveIntegration("{{.integrationSonarQubeID}}", "")

      // set quality gate
      {{if .qualityGate}}
      sh "echo start setting qualitygate to {{.qualityGate}}"
      {{if .propertiesPath}}
      sh "cmdsonar qualitygate select --host ${sonar_info['endpoint']} \
          --token ${sonar_info['token']} --gate-id {{.qualityGate}} --properties {{.propertiesPath}}"
      {{else}}
      sh "cmdsonar qualitygate select --host ${sonar_info['endpoint']} \
          --token ${sonar_info['token']} --gate-id {{.qualityGate}}"
      {{end}}
      {{end}}

      // wrap sonar-scanner command
      def SONAR_SCANNER_OPTS=[]
      SONAR_SCANNER_OPTS << "-Dsonar.host.url=${sonar_info['endpoint']}"
      SONAR_SCANNER_OPTS << "-Dsonar.login=${sonar_info['token']}"

      {{if .lang}}
      SONAR_SCANNER_OPTS << '-Dsonar.language={{.lang}}'
      {{end}}
      {{if .sonarContextDir}}
      SONAR_SCANNER_OPTS << '-Dsonar.sources={{.sonarContextDir}}'
      {{end}}
      {{if .propertiesPath}}
      SONAR_SCANNER_OPTS << '-Dproject.settings={{.propertiesPath}}'
      {{end}}

      // start scan
      withSonarQubeEnv('sonarqube') {
        sh "sonar-scanner ${SONAR_SCANNER_OPTS.join(' ')}"
        {{if .waitForQualityGate}}
        sh "cmdsonar taskmonitor --host ${sonar_info['endpoint']} \
            --token ${sonar_info['token']}"
        {{end}}
      }
    }
  arguments:
    - name: "integrationSonarQubeID"
      schema:
        type: string
      display:
        type: alauda.io/integration
        args:
          types: SonarQube
        name:
          zh-CN: "SonarQube集成实例"
          en: "SonarQube Integration Instance"
      required: true
      default: ""
    - name: "qualityGate"
      schema:
        type: string
      display:
        type: alauda.io/sonarqube/qualitygates
        name:
          zh-CN: "Sonar扫描质量阈"
          en: "Sonar Scan QualityGate"
      required: false
      default: ""
    - name: "lang"
      schema:
        type: string
      display:
        type: alauda.io/sonarqube/lang
        name:
          zh-CN: "语言"
          en: "Sonar Scan Language"
      required: false
      default: ""
    - name: "sonarContextDir"
      schema:
        type: string
      display:
        type: string
        name:
          zh-CN: "代码扫描路径"
          en: "code path of sonar scanner"
      required: false
      default: .
    - name: "propertiesPath"
      schema:
        type: string
      display:
        type: string
        name:
          zh-CN: "sonar-project.properties路径"
          en: "sonar-project.properties Path"
      required: true
      default: "./sonar-project.properties"
    - name: "waitForQualityGate"
      schema:
        type: boolean
      display:
        type: boolean
        name:
          zh-CN: "是否等待代码扫描结果"
          en: "Enable If Wait QualityGate Result"
        description:
          zh-CN: "如果开启，当前流水线将等待SonarQube扫描结果，并根据结果决定流水线的成功或者失败"
          en: "If Enable, Will Wait SonarQube Analysis Result According to QualityGate"
      required: false
      default: false